generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model user_files {
  fileId       String       @id @default(cuid())
  fileName     String       @db.VarChar(45)
  uploadStatus UploadStatus @default(PENDING)
  url          String       @db.VarChar(145)
  key          String?      @db.VarChar(145)
  fileType     String?      @db.VarChar(100)
  isSelected   Boolean?     @default(false)

  messages message[]

  createdAt      String    @db.VarChar(50)
  updatedAt      String?   @db.VarChar(50)
  users          users?    @relation(fields: [userId], references: [userId])
  userId         String    @db.VarChar(45)
}

model users {
  userId         String       @unique(map: "userId_UNIQUE") @db.VarChar(50)
  userEmail      String       @id @unique(map: "email_UNIQUE") @db.VarChar(45)
  name           String       @db.VarChar(45)
  subscriptionId String?      @db.VarChar(45)
  priceId        String?      @db.VarChar(45)
  Message        message[]
  File           user_files[]
  
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map(name: "stripe_current_period_end")
}

model message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean
  createdAt     String      @db.VarChar(50)
  updatedAt     String?     @db.VarChar(50)
  User          users?      @relation(fields: [userId], references: [userId])
  userId        String?
  File          user_files? @relation(fields: [fileId], references: [fileId])
  fileId        String?
}
